import datetime
import logging
import random
import string

from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from Config.config import ADMIN_ID
from DB.DB_utils import request_to_db_multi
from Keyboards.Inline_Builder import build_inline_pay
from Keyboards.Reply import r_kb_2
from Utils import Bot
from Utils.Bot import get_future_date
from Utils.Process_Pay_to_base import insert_payment_to_base
from Utils.Process_Yoomoney import yoo_receive_pay_link, yoo_check_payment
from Utils.State_Machine import States


async def start_payment(call: CallbackQuery, state: FSMContext, bot: Bot):
    user_id_here = call.from_user.id
    pay_description = '1 –º–µ—Å—è—Ü'
    amount = 1020

    button = call.data
    if button == 'month_1':
        pay_description = '1 –º–µ—Å—è—Ü'
        amount = 1020
    elif button == 'month_3':
        pay_description = '3 –º–µ—Å—è—Ü–∞'
        amount = 3060
    elif button == 'month_6':
        pay_description = '6 –º–µ—Å—è—Ü–µ–≤'
        amount = 5508
    elif button == 'month_12':
        pay_description = '12 –º–µ—Å—è—Ü–µ–≤'
        amount = 9792

    # –ì–µ–Ω–µ—Ä–∏–º –º–µ—Ç–∫—É –æ–ø–ª–∞—Ç—ã: id —é–∑–µ—Ä–∞ + —Ä–∞–Ω–¥–æ–º–Ω–∞—è –±—É–∫–≤–∞ + –¥–∞—Ç–∞
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –µ—ë
    # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —é–º–∞–Ω–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        date = datetime.date.today()
    rand = random.choice(string.ascii_lowercase)
    label = f'{user_id_here}{rand}{date}'
    await state.update_data(label=label)
    await state.update_data(tarif=button)

    try:
        link = await yoo_receive_pay_link(pay_description, amount, label)
        await bot.send_message(user_id_here,
                               f'üîò –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ {pay_description} –¥–æ—Å—Ç—É–ø–∞\n—Å—Ç–æ–∏–º–æ—Å—Ç—å: {amount}—Ä\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '
                               f'"–û–ø–ª–∞—Ç–∏—Ç—å"\n–∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"',
                               reply_markup=build_inline_pay(link))
        await state.set_state(States.check_payment)
    except Exception as ex:
        logging.error(f'–Æ–º–∞–Ω–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞: {ex}')
        await bot.send_message(ADMIN_ID, f'–ê–•–¢–£–ù–ì! –Æ–º–∞–Ω–∏ –Ω–µ –¥–∞—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É')
        await bot.send_message(user_id_here,
                               f'üîò –ö–∞–∫–∏–µ-—Ç–æ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –Ω–∞–ø–∏—à–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É',
                               reply_markup=r_kb_2)


async def check_payment(call: CallbackQuery, state: FSMContext, bot: Bot):
    user_id_here = call.from_user.id
    await bot.send_message(user_id_here, f'üîò –Ø –ø—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ–π –ø–ª–∞—Ç—ë–∂, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ')

    data = await state.get_data()
    label = str(data['label'])
    is_paid = data['tarif']

    status, pay_datetime, amount = await yoo_check_payment(label)

    if status == 'none':
        await bot.send_message(user_id_here, f'üîò –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–∏–ª–∞ –º–Ω–µ, —á—Ç–æ –ø–ª–∞—Ç—ë–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω')
    elif status == 'success':
        await bot.send_message(user_id_here, f'üîò –ü–ª–∞—Ç—ë–∂ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!')

        # TODO –ó–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
        # TODO –í –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É:
        # –û—Ç–º–µ—Ç–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ, –¥–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞, —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, label –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —é–º–∞–Ω–∏)

        # –ï—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ –Ω–µ –ø–µ—Ä–≤—ã–π, –∏ –µ—Å–ª–∏ —Å—Ä–æ–∫ –µ—â—ë –Ω–µ –≤—ã—à–µ–ª
        # —Ç–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞
        # –∏ –ø—Ä–∏–±–∞–≤–∏—Ç—å –∫ –Ω–µ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫

        list_of_request = "date_of_end, paid_month_count"
        sss = list(request_to_db_multi(list_of_request, 'user_id', user_id_here)[0])
        date_of_old_end = sss[0]
        paid_month_count = sss[1]
        date_time_2 = datetime.datetime.now()

        if date_of_old_end >= date_time_2:
            pay_datetime = date_of_old_end
        end_date = '2000-01-01 23:59:59'

        if is_paid == 'month_1':
            end_date = get_future_date(pay_datetime, 31)
            paid_month_count = paid_month_count + 1
        elif is_paid == 'month_3':
            end_date = get_future_date(pay_datetime, 92)
            paid_month_count = paid_month_count + 3
        elif is_paid == 'month_6':
            end_date = get_future_date(pay_datetime, 184)
            paid_month_count = paid_month_count + 6
        elif is_paid == 'month_12':
            end_date = get_future_date(pay_datetime, 365)
            paid_month_count = paid_month_count + 12

        await insert_payment_to_base(user_id_here, is_paid, pay_datetime, end_date, amount, label, paid_month_count, state, bot)

    elif status == 'refused':
        await bot.send_message(user_id_here,
                               f'üîò –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–∞–∑–∞–ª–∞ –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n\n–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞')
    elif status == 'in_progress':
        await bot.send_message(user_id_here,
                               f'üîò –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–∏–ª–∞ –º–Ω–µ, —á—Ç–æ –ø–ª–∞—Ç—ë–∂ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏')
