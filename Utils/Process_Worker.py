from datetime import datetime

from aiogram.fsm.context import FSMContext

from DB.DB_utils import request_to_db_multi, update_values_db_two
from Utils import Bot
from Utils.State_Machine import States


async def process_worker_link(user_id_inviter, state, bot):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤ –±–∞–∑–µ –∏–º–µ–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –æ—Ç –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
    data = await state.get_data()
    user_id_here = data['user_id']
    username = data['username']
    if user_id_inviter != user_id_here:
        list_of_request = "employee_of, user_status, id"
        try:
            sss = list(request_to_db_multi(list_of_request, 'username', f"'{username}'")[0])
            employee_of = sss[0]
            user_status = sss[1]
            id_here = sss[2]

            # –ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –∏ id –∏–∑ –∏–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏ —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–∞ = employee
            if employee_of == int(user_id_inviter) and user_status == 'employee':
                date_time_2 = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                list_values_of_DB = f"user_id = '{data['user_id']}'," \
                                    f"first_name = '{data['first_name']}'," \
                                    f"last_name = '{data['last_name']}'," \
                                    f"date_of_use = '{date_time_2}'," \
                                    f"come_from = '{data['come_from']}'"
                update_values_db_two(list_values_of_DB, 'id', id_here)

                list_of_request = "reg_done, user_channel"
                sss = list(request_to_db_multi(list_of_request, 'user_id', employee_of)[0])
                reg_done = 'yes'
                work_channel = sss[1]  # –ü–æ–ª—É—á–∞–µ–º id –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏—Å—å —Ä–∞–±–æ—Ç–∞
                work_user_for_base = employee_of  # –ò –≤ —Å—Ç—Ä–æ–∫—É –∫–∞–∫–æ–≥–æ —é–∑–µ—Ä–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞) –±—É–¥–µ–º –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await state.update_data(work_user_for_base=work_user_for_base)
                await state.update_data(work_channel=work_channel)

                await state.update_data(worker='worker')  # –°–¥–µ–ª–∞–Ω–æ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await bot.send_message(user_id_here, 'üîò –ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n'
                                                     '–¢–≤–æ—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')

            else:
                await bot.send_message(user_id_here, 'üîò –í –º–æ–µ–π –±–∞–∑–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç–≤–æ—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏\n\n'
                                                     '–≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–±–µ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –µ—â—ë –Ω–µ –≤–Ω—ë—Å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n'
                                                     '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É')
                await state.set_state(States.stop)
                await stop_registration(user_id_here, state, bot)
        except Exception as ex:
            await bot.send_message(user_id_here, 'üîò –í –º–æ–µ–π –±–∞–∑–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç–≤–æ—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏\n\n'
                                                 '–≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–±–µ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –µ—â—ë –Ω–µ –≤–Ω—ë—Å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n'
                                                 '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É')
            await state.set_state(States.stop)
            await stop_registration(user_id_here, state, bot)
    else:
        await bot.send_message(user_id_here, 'üîò –¢—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º')
        return


async def stop_registration(user_id_here, state: FSMContext, bot: Bot):
    await bot.send_message(user_id_here, f'üîò –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    await state.update_data(user_id=88888888)  # –°–¥–µ–ª–∞–Ω–æ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
